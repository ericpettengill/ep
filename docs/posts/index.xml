<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on EP</title>
    <link>https://ericpettengill.github.io/ep/posts/</link>
    <description>Recent content in Posts on EP</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 20 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ericpettengill.github.io/ep/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Extract Tableau Shapes Using Python</title>
      <link>https://ericpettengill.github.io/ep/posts/extract-tableau-shapes/</link>
      <pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ericpettengill.github.io/ep/posts/extract-tableau-shapes/</guid>
      <description>How to extract custom shapes from tableau workbooks using python and beautifulsoup4.
INSPIRATION
CODE
from bs4 import BeautifulSoup import base64 import os import pathlib def main(workbook_path: str): &amp;#34;&amp;#34;&amp;#34; :param workbook_path: string /path/to/workbook.twb :return: None &amp;#34;&amp;#34;&amp;#34; fp = pathlib.Path(workbook_path) assert fp.suffix == &amp;#39;.twb&amp;#39;, f&amp;#34;workbook must be *.twb file, you passed {fp.suffix}&amp;#34; with open(fp, &amp;#39;r&amp;#39;) as f: y = BeautifulSoup(f) out = {} for shapes in y.find_all(&amp;#34;shapes&amp;#34;): for img in shapes.find_all(&amp;#39;shape&amp;#39;): out.update({ img.</description>
    </item>
    
    <item>
      <title>Running Python Scripts from Batch File</title>
      <link>https://ericpettengill.github.io/ep/posts/running-python-scripts-from-batch-files/</link>
      <pubDate>Sat, 11 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ericpettengill.github.io/ep/posts/running-python-scripts-from-batch-files/</guid>
      <description>How to run python scritps from batch file using other python files as imports
Folder structure:
└── temp ├── Module │ ├── moduleA.py │ └── moduleB.py └── Schedule └── schedule.bat moduleA.py Link to heading def add_numbers(x, y): return x + y moduleB.py Link to heading from Module import moduleA if __name__ == &amp;#39;__main__&amp;#39;: print(moduleA.add_numbers(4, 10)) schedule.bat Link to heading Step 1: change to the parent directory of the project you&amp;rsquo;re working in: cd &amp;quot;path/to/project&amp;quot;.</description>
    </item>
    
    <item>
      <title>Parallelizing API calls using python</title>
      <link>https://ericpettengill.github.io/ep/posts/parallelizing-api-calls-using-python/</link>
      <pubDate>Thu, 09 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ericpettengill.github.io/ep/posts/parallelizing-api-calls-using-python/</guid>
      <description>This comes from a project where I had to make many GET requests on an api. Each request was structured the same but with different parameters. To speed this up I utilized the concurrent.futures python module to parallelize requests.
To start, I created a dataframe of all the parameters needed for each request and put them into a list as the method I used within concurrent.futures requires a list(more on this later).</description>
    </item>
    
  </channel>
</rss>
